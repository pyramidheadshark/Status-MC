import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from mcstatus import JavaServer
import logging
from urllib.parse import urlparse

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "7753867805:AAFr-XlfnVivR9URMxi0-GEk-PSQFriJBFY"
USER_IDS = [5121976638, 290812347]  # —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SERVER_ADDRESS = "mc.kseoni.ch"
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥—ã

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def parse_server_address(address):
    parsed = urlparse(address)
    if parsed.netloc:
        return parsed.netloc
    return parsed.path

async def check_server():
    server_address = parse_server_address(SERVER_ADDRESS)
    try:
        server = JavaServer.lookup(server_address)
        status = await server.async_status()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

async def send_notification(message):
    for user_id in USER_IDS:
        try:
            await bot.send_message(user_id, message)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def monitor_server():
    previous_status = True
    while True:
        current_status = await check_server()
        if previous_status and not current_status:
            await send_notification(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! Minecraft —Å–µ—Ä–≤–µ—Ä {SERVER_ADDRESS} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        elif not previous_status and current_status:
            await send_notification(f"‚úÖ Minecraft —Å–µ—Ä–≤–µ—Ä {SERVER_ADDRESS} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        previous_status = current_status
        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    await send_notification(f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–µ—Ä–≤–µ—Ä {SERVER_ADDRESS}.")
    monitoring_task = asyncio.create_task(monitor_server())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())